7/11
	学习git版本控制平台
	fetch 抓取
	pull 拉取
	merge 合并
	push 推送
	fork 复制
	pull request 拉取申请
	master 控制
7/12
	global 全球的
	track 追踪
	concert 转换
	branch 分支
	on branch master 主干支	
	insertion 插入(行)
	modified 修改过的
	discard 撤销/取消
	tail 尾巴 head 头部
	prrety 漂亮的
	remote 远程
	collaborate  合作


********************************************************************************************************************************************************************************************
	vim good.txt 					创建(更改:已经存在的这个文件)一个文本文档 
	wq 						是关闭(我去)
	set nu 						设置行号(自动调用vim命令)
	ll 						查看目录
	cd c: 						进入C盘
	cd other/ 					进入other文件夹
	ls -la 						查看带有隐藏文件的所有文件
	ls -l|less 					分屏查看
	ll|less 					进入专用目录
	git init 					初始化工作空间
	pwd 						查看完整路径
	cat .git/config 				打开.git下的config文件
	cd ~ 						进入用户目录
	pwd 
		/c/Users/xiaokai 			显示当前所有路径


	git status 					工作区状态查看
	git init					初始化git工作空间
	git add [filename]				添加文件到暂存区
	git commit -m "commit message" [file name] 	提交文件到本地库

	git rm --cached [filename] 			将文件从暂存区移除
		例子:
			git commit -m"My second commit,modify good.txt" good.txt 带有更新备注信息的提交方式
			修改之后需要先添加到暂存区,之后再提交到本地库

********************************************************************************************************************************************************************************************
	
	git log 					查看日志已经可以看到光标在哪一行(head光标)
		多屏显示控制方式:空格向下翻页;b向上翻页;q退出
	git log --pretty=oneline  			日志每条一行显示:哈希值全部显示
	git log --oneline 				显示一行:哈希码只显示7位
	git reflog 					可以显示指针(head)编号:HEAD@{移动到当前版本需要多少步}

********************************************************************************************************************************************************************************************
	
	git reset --hard [局部索引值(7位就行了)] 	当前版本前进后退
	git reset --hard HEAD^^^ 			一个^表示后退一步
	git reset --hard HEAD~n 			n表示后退n步
	head -5 good.txt 				查看文件前5行
	tail -n -f good.txt 				查看文件后f行

********************************************************************************************************************************************************************************************
	
	touch [文件] 					创建文件
	tar 						解压缩
		如tar -zxvf node-v4.4.0.tar.gz
	curl 						网络请求，如curl http://www.baidu.com
	whoami 						查看当前用户
	| 						管道符可以将多个命令连接使用，上一次（命令）的执行结果当成下一次（命令）的参数
	grep 						匹配内容，一般结合管道符使用
	
********************************************************************************************************************************************************************************************
	
	git help [具体命令] 				查看具体命令的介绍
	git reset --hard HEAD 				重置工作区
	git diff Apple.txt 				比较工作区和暂存区文件
	git diff HEAD apple.txt 			比较工作区和本地库历史记录文件
	git diff 					不带文件名比较多个文件

	reset 回车  					可以清屏
	
********************************************************************************************************************************************************************************************
	
	git branch -v 					查看分支
	git branch [分支名] 				创建分支
		git branch hot_fix 			创建热分支(修复分支)
	git checkout [分支名] 				切换分支
	git merge [分支名称] 				合并分支(先切换到要被修改的分支上)
	
********************************************************************************************************************************************************************************************
	搜狗标点符号切换快捷键:ctrl+.
********************************************************************************************************************************************************************************************
	
	git remote -v 									查看别名
	git remote add origin https://github.com/kaixiaochu/huashanlunjian.git 		远程库连接链接起别名origin
	git push origin master 								本地库推送到GitHub项目库
	
********************************************************************************************************************************************************************************************
	
	git clone https://github.com/kaixiaochu/huashanlunjian.git 从远程库(GitHub)下载文件
	远程克隆岛本地库:完整的把远程库下载到本地;创建origin远程地址别名;初始化本地库
	
********************************************************************************************************************************************************************************************
	
	拉取(主合并)
	pull=fetch+merge
	git fetch [远程库地址别名] [远程分支名] 		从远程库拉取(为了解决协同开发的冲突)
	git merge [远程库地址别名/远程库分支名] 		合并远程库和本地库
		先拉取之后合并的好处是:可以先拉取下来看文件是否可以合并,解决协同开大的冲突
	git pull [远程库地址别名] [远程库分支] 			相当于直接下载远程库文件并与本地库直接合并
	git checkout origin/master				切换到拉取文件的分支(用branch这个命令实际是看不到这个分支的)
	
	解决冲突的办法是:
		先git pull origin master两次(进入master|MERGINGZHA分支)，之后进入文件具体删除保存，最后提交git commit -m "....." (注意:这儿不需要再写文件名)
********************************************************************************************************************************************************************************************









