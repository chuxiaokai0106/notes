2018/8/3 13:17
	template	模板	
	sampler		取样器
	./		当前路径下
	delimiter 	分隔符

********************************************************************************************************************************************************************************************
	
	http请求相应
		1xx:信息响应类,表示接收到请求并且继续处理	
		2xx:处理成功响应类,表示动作被成功接收,理解和接受
		3xx:重定向响应类,为了完成指定的动作,必须接受进一步处理
		4xx:客户端错误,客户端请求包含语法或者是不能正确执行
		5xx:服务端错误,服务器不能正确执行一个正确的请求

	http请求响应模型(一次请求生命周期)
		客户端发起请求到api接口层-->api接收客户端发起的用户请求(api对业务逻辑进行验证)-->api会将接收数据发给db层
		-->db会将返回的查询数据库的条目数给api-->api返回成功或失败的状态码给客户端-->客户端将返回信息提示给用户

	http请求方式
		请求协议格式
			请求首行
			请求头信息(头名称/头值)
			空行
			请求体
		响应协议格式
			响应行(协议/版本 状态码 状态码的解析)
			响应头(key/value格式)
			空行
			响应正文(一般开发为json字符串)

		-GET:没有请求体,请求连接会自带参数
		-POST:有请求体

********************************************************************************************************************************************************************************************

	Jmeter功能
		-BS架构应用性能
		-HTTP协议接口功能与性能
		-FTP上传下载性能
		-Mysql数据库性能
		-MongoDB数据库性能
		-支持自定义java组件开发
		
		接口测试
		性能测试:内在--程序算法,响应时间
		压力测试:外在--最大用户数,外在负载
		web自动化测试
		数据库测试
		java程序测试

********************************************************************************************************************************************************************************************

	目录:
		backups		备份缓冲目录
		bin		核心可执行文件，包含配置

			jmeter.bat: windows启动文件：
			
			jmeter.sh: mac或者linux启动文件：
			
			jmeter-server：mac或者Liunx分布式压测使用的启动文件
			
			jmeter-server.bat：mac或者Liunx分布式压测使用的启动文件
			
			jmeter.properties: 核心配置文件
		docs		文件/API文档
		extras		插件拓展的包
		lib		jar包
			ext:核心包
			
				junit:单元测试包

 
	jmeter缺点
		-不支持ip欺骗
		-不支持前端测试(js程序)
	


	测试流程:
		简单http请求入门:新建测试计划-->添加线程组-->线程组上添加http请求-->测试计划添加监听器查看响应结果

********************************************************************************************************************************************************************************************		

	Jmeter组件

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		1 线程组
			(1)概念: 
				进程:一个正在执行的程序对应一个进程
				线程:一个进程中可以有多个线程
				线程组:按照线程性质对线程进行分组

				并发执行:多个线程同时执行(开始和结束没有关系)
				顺序执行:按照线程启动顺序挨个执行

			(2)使用步骤
				一个测试计划-->两个线程组-->每个线程组设置3个线程数和-->每个线程组添加一个http请求
					> 查看响应结果--在测试计划中添加结果数
					> 测试计划页面有--独立运行每个线程组(一个组运行结束后运行下一个组)
				
				post请求
					> http请求页面-->body data-->添加请求体
					> http信息头管理器:右键测试计划>添加>配置原件>http信息头管理器

			(3)优化 http请求默认值(多个http请求相同参数统一管理)
				http请求默认值:右键测试计划>添加>配置原件>http请求默认值
				功能:可以直接添加请求地址,端口号... 之后线程组里边的http请求就不用再次填写了
			
			(4)高级_属性与调度器
				线程组界面:
					线程数:设置线程数(相当于用户个数)
					Ramp-Up Period(in seconds):秒数(启动所有线程需要的秒数,自己设定)
					循环次数:线程循环执行的次数(一个用户循环访问很多次)
			
					调度器:可以自由设置线程访问时间
						-循环次数设置为永远
						-在x秒内访问服务器,访问y秒
						-在M时开始访问,在N时结束
						-注意:时间不能有冲突

			(5)SetUp 和 TearDown 线程组  
				测试计划右键-->添加-->Threads(User)-->SetUp/TearDown Thread Group
					Set Up	  线程组:最先执行的线程组
							 加载程序主体执行所需的资源
					Tear Down 线程组:最后执行的线程组
							 程序正式关闭之前,可以将数据保存近内存
			(6)用户自定义变量
				简介：	为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用
		
					比如服务器地址,服务器端口号

	

				1、线程组->add -> Config Element(配置原件)-> User Definde Variable（用户定义的变量）
		
		
				2、引用方式${XXX}，在接口中变量中使用

(例:在http界->IP输入框内->输入:${ip})	
				3、原始查看结果树和非原生查看（基础按钮）

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		2 参数化--CSV Data Set Config(重点)
			(1)概念
				参数化:动态的获取并设置数据
				原理:见图

			(2)使用步骤
				http请求(post)-->body data中添加json字符串(值为空)-->写一个文本文件(写入json对应的值,用逗号隔开)
				-->添加CSV Data Set Config组件-->配置CSV组件属性(文件位置,编码格式,请求体json获取参数配置,文本分隔符)-->请求体json配置	
					>CSV Data Set Config组件: 线程组右键>添加>配置原件>CSV Data Set Config
				具体过程见图
					excel文件也是用逗号分隔
				
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		3 断言
			单独测试线程的响应文本,响应代码,响应信息等(分开测试)
			
			(1)、增加断言: 线程组 -> 添加 -> 断言 -> 响应断言  

			
				apply to(应用范围):
				
				Main sample only: 仅当前父取样器 进行断言，一般一个请求，如果发一个请求会触发多个，则就有sub sample（比较少用）
			
				要测试的响应字段：
				
					响应文本：即响应的数据，比如json等文本
				
					响应代码：http的响应状态码，比如200，302，404这些
				
					响应信息：http响应代码对应的响应信息，例如：OK, Found
				
					Response Header: 响应头
			
			模式匹配规则：
				
				包括：包含在里面就成功
				
				匹配：响应内容完全匹配，不区分大小写
				
					equals：完全匹配，区分大小写

					Substring：子字符串				


		
			(2)、断言结果监听器: 线程组-> 添加 -> 监听器 -> 断言结果
			
				里面的内容是sampler采样器的名称
			
				断言失败，查看结果树任务结果颜色标红(通过结果数里面双击不通过的记录，可以看到错误信息)


		
			(3)、每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总

	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		4 聚合报告
			查看测试数据(统计报告)

			新增聚合报告：线程组->添加->监听器->聚合报告（Aggregate Report）

			
				lable: sampler的名称
			
				Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100
			
				Average: 平均响应时间
			
				Median: 中位数，也就是 50％ 用户的响应时间


			
				90% Line : 90％ 用户的响应不会超过该时间			
				95% Line : 95％ 用户的响应不会超过该时间
			
				99% Line : 99％ 用户的响应不会超过该时间
			
				min : 最小响应时间
（ms）			
				max : 最大响应时间
（ms）		
	
			
				Error%：错误的请求的数量/请求的总数
			
				Throughput： 吞吐量――默认情况下表示每秒完成的请求数（Request per Second) 
				KB/Sec: 每秒接收数据量


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		5 压测脚本JMX
			就是测试之后的保存文本(xml格式)

			用一个文本编辑器就可以打开

********************************************************************************************************************************************************************************************

	MySql数据库压测
		(1)准备工作
			1、Thread Group -> add -> sampler -> jdbc request
	
				query:写查询语句	
			2、jar包添加(测试计划界面添加)  
				mysql-connector-java-5.1.30.jar 

		
			3、JDBC connection Configuration 配置
			
				1、JDBC request->add -> config element -> JDBC connection configuration
				
					核心配置
		 			
						Max Number of connections : 最大连接数
					
						MAX wait :最大等待时间
					
						Auto Commit: 是否自动提交事务

	
				
						DataBase URL : 数据库连接地址 jdbc:mysql://127.0.0.1:3306/blog
					
						JDBC Driver Class : 数据库驱动，选择对应的mysql
					
						username:数据库用户名
					
						password:数据库密码

		(2)request压测Mysql,select,insert语句
			1、Debug Sampler使用（结果树中查看）
			
				Thread Group -> add -> sampler -> debug sampler
			
		
			2、参数：(sql结尾不要加";")
			
				1、variable name of pool declared in JDBC connection configuration（和配置文件同名）
			
				2、Query Type 查询类型
			
				3、parameter values 参数值
	(SQL语句中有问号值,来此处找值,多个值用逗号隔开)		
				4、parameter types  参数类型
	(和参数值对应)		
				5、variable names  sql执行结果变量名
			
				6、result variable names 所有结果当做一个对象存储
			
				7、query timeouts  查询超时时间 
			
				8、 handle results  处理结果集
			3. 一般Query Type选择prepare开头的,有预编译处理

********************************************************************************************************************************************************************************************

	分布式压测
		普通压测：单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等
		 
		分布式压测：利用多台机器向目标机器产生压力，模拟几万用户并发访问


		(1)原理
			1、总控机器的节点master，其他产生压力的机器叫“肉鸡”server
		
			2、master会把压测脚本发送到 server上面


		
			3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter
		
			4、结束后，server会把压测数据回传给master,然后master汇总输出报告
		
			5、配置详情

				master中->jmeter.properties文件中->remote_host上配置各个server的ip地址(多个ip地址用逗号隔开)

********************************************************************************************************************************************************************************************
	
	高级篇---阿里云Linux服务器压测接口实战

		(1)SpringBoot 接口打包，并用jar包方式部署

			简介：用jar包方式在控制台进行启动
	
			打包 mvn package && java -jar target/gs-spring-boot-0.1.0.jar
 
		
		(2)阿里云服务器介绍和ECS服务器使用
			简介：
		
				阿里云服务器介绍和购买ECS服务器等

		
				推荐购买2G内存以上的进行开发学习


		(3)阿里云Linux服务器下安装启动JDK8并配置环境变量
			linux下使用wget命令下载jdk8：(下载jdk8解压之后放到指定目录下)
				进到目录/user/local/software

			配置环境变量:
			vim /etc/profile
				加入
				export JAVA_HOME=/user/local/software/jdk8
				export JAVA_BIN=/usr/local/software/jdk8
				export PATH=$PATH:$JAVA_HOME/bin
				export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
				export JAVA_HOME JAVA_BIN PATH CLASSPATH
		
		(4)部署java项目到阿里云服务器和守护进程讲解
	
			简介：
		
				部署项目到阿里云，并启动，公网可以访问
		
				1、注意点
			
					关闭防火墙
			
					阿里云控制台安全策略，开放端口
		
				linux上运行 java -jar xxxx
 
 		
				ssh root@120.79.160.143

 		
				守护进程：nohup java -jar xxxxx &
 			
				
		(5)阿里云Linux服务器安装Jmeter 4.0
	
			简介：在阿里云环境下安装Jmeter

		
			经济足够:购买两台阿里云机器
		
			不足：本地虚拟机，在同个局域网就可以，安装同个版本的jdk,jmeter,同个路径，不要带有空格或者中文

		
		
			下载地址

			wget http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz











		(6)Jmeter非GUI界面 参数
			讲解命令：非GUI界面，压测参数			
				-h 帮助
			
				-n 非GUI模式
			
				-t 指定要运行的 JMeter 测试脚本文件
			
				-l 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)
			
				-r Jmter.properties文件中指定的所有远程服务器
			
				-e 在脚本运行结束后生成html报告
			
				-o 用于存放html报告的目录（目录要为空，不然报错）


 		
			官方配置文件地址 http://jmeter.apache.org/usermanual/get-started.html

		
			jmeter -n -t linux_users_api.jmx -l result.jtl -e -o /usr/local/softwate/jmeter/temp/ResultReport

		
			jmeter -n -t /Users/jack/Desktop/linux_users_api.jmx -l result.jtl -e -o /Users/jack/Desktop/person/jmeter/temp








		(7)项目实战之阿里云Linux服务器下非GUI执行jmeter压测
	
			简介：
		
				在阿里云服务器上以非GUI界面去执行JMX压测脚本

 		
		
				jmx目录：/usr/local/software/jmeter/temp


jmeter
 
			-n -t /usr/local/software/jmeter/temp/linux_users_api.jmx -l /usr/local/software/jmeter/temp/jtl/result.jtl 

********************************************************************************************************************************************************************************************
















