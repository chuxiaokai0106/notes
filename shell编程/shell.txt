2018/9/4 17:31
	condition			条件
	base 				基础
	suffix				后缀

	:<<!
	要被注释内容			多行注释
	!		
	#要注释内容			单行注释
	./xxx.sh &			脚本中执行,以后台方式运行(在rc.local中自启动就是使用这个)			
	
*******************************************************************************************************************************************************************************************
	
	shell
		应用程序绑定shell命令解释器,驱动linux内核,内核驱动硬件

		编写规则(脚本要有可执行权限)
			#!/bin/bash         开头--用bin目录里边bash命令解析脚本(脚本中没有封号)
		
			执行两种方式:
				(1)./xxx.sh	需要有可执行权限
				(2)sh ./xxx.sh	不需要有可执行权限


*******************************************************************************************************************************************************************************************		
	
	shell变量
		系统变量:$HOME $PWD $SHELL $USER等等
			例如:  echo $PATH         echo默认自动换行 $表示引用
		用户自定义变量:只要不是单纯的数字都用 单引号 包起来
		
		显示系统中所有变量:set
				
		基本语法:
			变量=值					定义变量
			unset 变量				撤销变量
			readonly 变量 				申明静态变量(静态变量不能unset)	
			
			自定义变量:
				例子:
					脚本中:
					A=100
					echo "A=$A"
					ueset A
					echo "A=$A"
					执行脚本结果:
					A=100
					A=
		定义变量的规则:
			(1)变量名称可以由字母/数字和下划线组成,但是不能以数字开头
			(2)等号两侧不能有空格
			(3)变量名称一般习惯写大写
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		将命令的返回值赋值给变量,括号里边只能是命令,不能是运算(**变量**)
			(1)A='ls -la'		反引号,运行里面的命令
			(2)A=$(ls -la)		等价于反引号



*******************************************************************************************************************************************************************************************
	
	设置环境变量 /etc/profile (环境变量可以在shell脚本里直接用)
		命令:
			export 变量名=变量值			将shell变量输出为环境变量
			source 配置文件				让修改后的配置信息立即生效
			echo $变量名				查询环境变量的值
		
*******************************************************************************************************************************************************************************************
	
	位置参数变量
		概念:当我们执行一个shell脚本时,如果希望shell脚本里面获取到命令行的参数信息,就可以使用到位置参数变量
		     比如: ./myshell.sh 100 200 ,这个就是一个shell命令行,可以在myshell脚本中获取到值100 200
		
		语法:
			$n				n为数字,$0代表命令本身,$1-$9代表第一道第九个参数,十位数以上的参数,要写成${10}
			$*				*代表命令行里的所有参数,$*把所有的参数看成一个整体
			$@				@代表命令行里的所有参数,不过$@把每个参数区分对待
			$#				#代表所有的所有参数的数量
		例子:
			positionPara.sh脚本文件:
				#!/bin/bash
				#获取到各个参数
				echo "$0 $1 $2"
				echo "$*"
				echo "$@"
				echo "参数个数=#"
			命令行输入: 
				./positionPara.sh 88 99
			输出结果:
				./positionPara.sh 88 99
				88 99 
				88 99
				参数的个数=2


*******************************************************************************************************************************************************************************************
	
	预定义变量
		概念:
			就是shell设计者事先已经定义好的变量,可以直接在shell脚本中使用
		基本语法:
			$$				当前进程的进程号
			$!				后台运行的最后一个进程的进程号
			$？				最后一次执行的命令的返回状态,0-表示正确执行,非0数字-表示执行失败
		

*******************************************************************************************************************************************************************************************
	
	运算符
		如何在shell中进行各种运算操作
		
		基本语法:
			$((运算式))
			$[运算式]             ***********推荐用这个***********
			expr m + n	加
			expr m - n	减
			expr \*或/或% 	乘或除或取余


*******************************************************************************************************************************************************************************************
	
	条件判断
		基本语法:
			[ condition ] 			***注意condition前后要有空格***	
								非空返回true
		常用条件判断:
			(1)两个整数的比较
				=	字符串比较是否相等
				-lt	小于
				-le	小于等于
				-eq	等于
				-gt	大于
				-ge	大于等于
				-ne	不等于
			(2)按照文件权限进行判断
				-r	有读的权限
				-w	有写的权限
				-x	有执行的权限
			例子:if [-r /root/shell/a.txt]	判断路径下面的文件是否有可读权限
			(3)按照文件类型进行判断
				-f	文件存在并且是一个常规的文件
				-e	文件存在
				-d	文件存在并是一个目录
			例子:if [-e /root/shell/a.txt]	判断路径下面是否有a.txt文件


*******************************************************************************************************************************************************************************************
	
	流程控制
		<1>if判断
			格式一:
				if [ 条件 ];then
					程序
				else
					程序
				fi
			格式二:------------------------------------**最常用**
				if [ 条件 ]
					then
						程序
				elif [ 条件 ]
					then
						程序
				fi

		<2>case判断
			格式:
				case $变量名 in
				"值1")
					执行程序1
				;;
				"值2")
					执行程序2
				;;
				"值3")
					执行程序3
				;;
				.......其他程序x
				esac

		<3>for循环
			格式一:
				for 变量 in 值1 值2 值3
				do
					程序
				done
			例子:
				#使用 $*
				for i in "$*"
				do
					echo "the num is $i"
				done
				#结果
					the num is 10 20 30

				#使用 $@
				for j in "$@"
				do
					echo "the num is $j"
				done
				#结果
					the num is 10
					the num is 20 
					the num is 30
					
			格式二:
				for(( 初始值;循环控制条件;变量变化))	
				do
					程序
				done
			例子:
				SUM=0
				for((i=1;i<=100;i++))
				do
					SUM=$(($SUM+$i))	
				done
				echo "SUM=$SUM"	
				#结果
					5050
		<4>while循环
			格式:
				while [ 条件 ]
				do
					程序
				done
			例子:
				SUM=0
				i=0
				while [ $i -le $1 ]
				do
					SUM=$[$SUM+$i]
					i=$[$i+1]
				done
				#结果
				输入100,输出5050

***********************************************************************************************************************************************************************************************************

	read读取控制台输入
		基本语法:
			read [选项] [参数] 自定义变量		等待输入值,用自定义变量接收
				选项:
					-p			指定读取值是的提示符
					-t 时间			指定读取值时等待的时间(s),如果没有在指定的时间内输入,就不再等待了
				参数:
					指定读取值得变量名
		例子:
			read -p "请输入一个数num=" NUM1
			#结果
				./xxx.sh之后,输入内容,NUM1会被赋值
************************************************************************************************************************************************************************************************************
	
	函数	
		系统函数
			basename
				功能:
					返回完整路径最后/的部分,常用语获取文件名
				基本语法:
					basename [pathname] [suffix] 
					basename [string] [suffix] 			basename命令会删掉所有的前缀包括最后一个('/')字符,然后将字符显示出来
						选项:
							suffix为后缀,如果suffix被指定了,basename会将pathname或string中的suffix去掉.
			
			dirname
				功能:
					返回完整路径最后/的前面的部分,常用于返回路径部分
				基本语法:
					dirname 文件绝对路径				从给定的包含绝对路径的文件名中去除文件名(非目录的部分),然后返回剩下的路径(目录的部分)
			
		自定义函数:[]---里面内容可有可无
			基本语法:	
				[ function ] funname[()]
				{
					程序;
					[return int;]
				}
			调用:
				直接写函数名:funname [值]
			例子:
				function getSum(){
					SUM=$[$1+$2]
					return $SUM;
				}
				read -p "请输入第一个数n1:" n1
				read -p "请输入第二个数n2:" n2
				#调用函数
				getSum $n1 $n2			

***********************************************************************************************************************************************************************************************************

	案例:定时维护数据库mysql
		
	需求:
		>每天凌晨2:10备份 数据库 atguifuDB 到/date/backup/db
		>备份开始和备份结束要有相关提示
		>备份后的文件要求以备份时间为文件名,并打包成.tar.gz的形式,比如:2018-03-12_212343.tar.gz
		>在备份的同时,检车是否有10天前备份的数据库文件,如果有就将其删除

	代码:
		#!/bin/bash
		
		

#完成数据库的定时备份
		
#备份的路径
		
BACKUP=/data/backup/db

		#当前的时间作为文件名

		DATETIME=$(date +%Y_%m_%d_%H%M%S)
		
#可以输出变量调试
		
#echo ${DATETIME}
		
		

echo "=======开始备份========"
		
echo "=======备份的路径是 $BACKUP/$DATETIME.tar.gz"

		

#主机
		
HOST=localhost
		
#用户名
		
DB_USER=root
		
#密码
DB_PWD=root

		#备份数据库名

		DATABASE=atguiguDB
		
#创建备份的路径
		
#如果备份的路径文件夹存在，就使用，否则就创建
		
[ ! -d "$BACKUP/$DATETIME" ] && mkdir -p "$BACKUP/$DATETIME"
		
#执行mysql的备份数据库的指令
		
mysqldump -u${DB_USER} -p${DB_PWD} --host=$HOST  $DATABASE | gzip > $BACKUP/$DATETIME/$DATETIME.sql.gz
		
#打包备份文件
		
cd $BACKUP

		tar -zcvf $DATETIME.tar.gz $DATETIME
		
#删除临时目录
		
rm -rf $BACKUP/$DATETIME

		

#删除10天前的备份文件
		
find $BACKUP -mtime +10 -name "*.tar.gz" -exec rm -rf {} \;
		
echo "=====备份文件成功==========="

	
	调度台中:
		crontab -e			进入编辑调度台
		加入命令:
			10 2 * * * /usr/sbin/mysql_db_backup.sh

*******************************************************************************************************************************************************************************************























































		