2018/9/3 10:11
	compile		编译
	scope		范围

以下基本都是概念:
********************************************************************************************************************************************************************************************

	maven
		概念:一种服务于java平台的自动化构建工具
	
		构建:
			概念:以 "java源文件" "框架配置文件" "JSP" "图片" "HTML" 等资源为 "原材料" ,去生产一个可以运行的项目的过程.
			・编译：Java源文件[User.class]->编译->Class字节码文件[User.class]->交给JVM去运行
			・部署：一个BS项目最终运行的并不是动态Web工程本身,而是这个动态Web工程"编译的结果"
				动态Web工程->编译 部署->编译结果

********************************************************************************************************************************************************************************************
	
	构建过程的几个主要环节
		①清理：删除以前的编译结果，为重新编译做好准备。
		②编译：将 Java 源程序编译为字节码文件。
		③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。
		④报告：在每一次测试后以标准的格式记录和展示测试结果。
		⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web
			工程对应 war 包。
		⑥安装：在 Maven 环境下特指将打包的结果――jar 包或 war 包安装到本地仓库中。
		⑦部署：将打包的结果部署到远程仓库或将 war 包部署到服务器上运行。

********************************************************************************************************************************************************************************************

	maven手动搭建版本使用步骤看另一个操作指南笔记

********************************************************************************************************************************************************************************************

	几个常用的maven命令(cmd里)
		mvn clean		清理缓冲
		mvn compile		编译主程序(默认先到本地仓库中去找,要是本地仓库没有插件环境,那么会自动连接外网到中央仓库下载) 
		mvn test-compile		编译测试程序
		mvn test			执行测试(junit)
		mvn package		打包
		mvn install		安装:把自己创建的工程写入仓库(在需要写入的项目名目录下cmd执行写入本地maven仓库该项目的编译结果)
		mvn site			生成站点
		※注意：运行Maven命令时一定要进入pom.xml文件所在的目录(也就是项目名所在路径)！

		编译：mvn compile　　	--src/main/java目录java源码编译生成class （target目录下）
		测试：mvn test　　　　	--src/test/java 目录编译
		清理：mvn clean　　　 	--删除target目录，也就是将class文件等删除
		打包：mvn package　　	--生成压缩文件：java项目#jar包；web项目#war包，也是放在target目录下
		安装：mvn install　　	--将压缩文件(jar或者war)上传到本地仓库
		部署|发布：mvn deploy　	--将压缩文件上传私服

********************************************************************************************************************************************************************************************

	关于maven联网加载问题
		1 >maven的核心程序中仅仅定义了抽象的生命周期,但是具体的工作由特定的插件来完成.而插件本身并不包括在maven的核心程序中.
		2 >当我们执行的maven命令需要用到某些插件是,maven核心程序会首先到本地仓库中查找.
		3 >本地仓库的默认位置:[系统中当前用户的家目录里面]\.m2\repository
		4 >maven核心程序如果在本地仓库中找不到需要的插件,那么它会自动连接外网,到中央仓库下载.
		5 >如果此时法连接外网,则构建失败.
		6 >修改默认本地仓库的位置可以让maven核心程序到我们事先准备好的目录下查找
			-找到maven的解压目录\conf\setting.xml
			-在setting.xml中找到localRepository标签
			-将<localRepository>/path/to/local/repo</localRepository>从注释取出
			-将标签体内容修改为已经准备好的maven仓库目录
			-一般建议repository文件见也放到.m2文件夹下,为了假如本地库不足,就下载到里面,逐步形成一个完整的repository仓库

********************************************************************************************************************************************************************************************

	maven的九个核心概念:
		①POM
			含义:Project Object Model 项目对象模型
			pom.xml对于maven工程是核心配置文件,与构建过程相关的一切设置都在这个文件中进行配置.
				重要程度相当于web.xml对于动态Web工程

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		②约定的目录结构
			>为什么要遵守约定的目录结构呢?
			maven要负责我们这个项目的自动化构建,以编译为例,maven要想自动化进行编译,那么它必须知道java源文件的来源
			如果我们自己定义的东西想要让框架或者工具知道,有两种办法
				>以配置文件的方式明确的告诉框架
				>遵守框架内部已经存在的约定
			规律:约定>配置>代码

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		③坐标
			>使用下面三个向量在仓库中唯一定位一个maven工程
				[1]groupid:公司或组织域名倒叙+项目
				[2]artifactid:模块名
				[3]version:版本
			>maven工程的坐标与仓库路径的对应关系
				例子:
				 <groupId>log4j</groupId>
  
				 <artifactId>log4j</artifactId>
  
				 <packaging>bundle</packaging>
				实际路径:log4j\log4j\1.2.17\log4j-1.2.17.pom

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		④仓库管理
			1 仓库分类
				本地仓库:当前电脑上部署的仓库目录,为当前电脑上所有的Maven工程服务
				远程仓库:
					[1]私服:搭建在局域网环境中,为局域网范围内所有Maven工程服务
					[2]中央仓库:架设在Internet上,为全世界所有的Maven工程服务
					[3]中央仓库镜像:为了分担中央仓库的流量,提升用户访问速度
			2 仓库中保存的内容:Maven工程
				[1]Maven自身所需要的插件
				[2]第三方框架或工具的jar包
				[3]我们自己开发的Maven工程

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		⑤依赖管理
		      [基础:依赖分类]
			1 maven解析依赖信息时会到本地仓库中查找被依赖的jar包
				对于我们自己开发的maven工程,使用mvn install命令安装后就可以进入仓库
			2 三个依赖名词的范围
				[1]compile范围依赖
					主程序:		有效
					测试程序:	有效
					打包:		参与
					部署:		参与
					典型例子:spring-core
				[2]test范围依赖
					主程序:		无效
					测试程序:	有效
					打包:		不参与
					部署:		不参与
					典型例子:junit
				[3]provided范围依赖
					主程序:		有效
					测试程序:	有效
					打包:		不参与
					部署:		不参与
					典型例子:Servlet-api
		     [高级:依赖的传递性]
			1 好处:可以传递的依赖不必要在每个模块工程中重复申明,最"最底层"的工程中依赖一次即可
			2 注意:非compile范围的依赖不能传递.所以在各个工程模块中,如果有需要就得手动添加test/provided范围的依赖
			3 jar包附属依赖jar包的排除
				在引入的dependency标签中加入exclusion标签(在哪个工程里面排除就在哪个工程里面设置,对下级工程不会有影响,对上级工程会有影响)
				例如:取消当前类的对于Hello类的传递依赖包spring-core.jar的附属包commons-logging.jar的排除
					<dependency>
  						<groupId>com.sunkaisens.cn</groupId>
  						<artifactId>Hello</artifactId>
  						<version>0.0.1-SNAPSHOT</version>
  						<type>jar</type>
  						<scope>complie</scope>
  						<exclusions>
  							<exclusion>
  								<groupId>commons-logging</groupId>
  								<artifactId>commons-logging</artifactId>
  							</exclusion>
  						</exclusions>
  					</dependency>
			4 依赖原则
				<1>路径短者优先
				<2>路径长度相同时,先声明者优先,也就是dependency标签的前面优先
			5 统一管理依赖的版本号
				背景:需要统一一个jar包和附属依赖的jar包都是同一个版本号
				操作:
					<1>在项目的pom.xml文件中使用properties标签,标签内统一声明版本号
						<properties>
							<com.spring.version>4.0.0.RELEASE</com.spring.version>
						</properties>
					<2>在需要统一版本的位置,使用${自定义标签名}引用声明的版本号
						<version>${com.spring.version}</version>
					<3>其实properties标签配合自定义标签声明数据的配置并不是只能用于声明依赖的版本号.
					   凡是需要统一声明后再引用的场合都可以使用.
						例如:<properties>
							<com.spring.version>4.0.0.RELEASE</com.spring.version>
							<project.build.sourcEncoding>UTF-8</project.build.sourcEncoding>
						     </properties>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		⑥生命周期
			看另个一笔记上面

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		⑦插件和目标
			1 生命周期的各个阶段仅仅定义要执行的任务是什么
			2 各个阶段和插件的目标是对应的
			3 相似的目标有特定的 插件来完成
			4 可以将目标看做是"调用插件功能的命令"
				例子:
				生命周期阶段		插件目标		插件
				compile			compile			maven-compiler-plugin
				test-compile		testCompile		maven-compiler-plugin

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		⑧继承
			1 背景
				Hello依赖的jjunit:4.0
				HelloFriend依赖的junit:4.0
				MakeFriends依赖的junit:4.9
				由于test范围的依赖不能传递,所以必然会分散在各个模块工程中,很容易造成版本不一致
			2 需求	
				统一管理各个模块工程中对junit依赖的版本
			3 解决思路
				将junit依赖统一提取到"父"工程中,在子工程中声明junit依赖时不指定版本,以父工程中统一设定的为准,同时也便于修改.
			4 操作步骤
				<1>创建一个Maven工程作为父工程,注意:打包的方式为pom
					<groupId>com.atguigu.maven</groupId>
					<artifactId>Parent</artifactId>
					<version>0.0.1-SNAPSHOT</version>
					<packeging>pom</packeging>
				<2>在子工程声明对父工程的引用
					<!-- 子工程中声明父工程 -->
					<parent>
						<groupId>com.atguigu.maven</groupId>
						<artifactId>Parent</artifactId>
						<version>0.0.1-SNAPSHOT</version>
						<!-- 指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径 -->
						<relativePath>../Parent/pom.xml</relativePath>
					</parent>
				<3>将子工程的坐标中与父工程坐标中重复的内容删掉
					groupId 标签
					artifactid 标签
				<4>在父工程中统一管理junit的依赖
					<dependencyManagement>
						<dependencies>
							<dependency>
								<groupId>junit</groupId>
								<artifactId>junit</artifactId>
								<version>4.9</version>
								<scope>test</scope>
							</dependency>
						</dependencies>
					</dependencyManagement>
				<5>在子工程中删除junit依赖的版本号部分
					junit中:version 标签
			5 **注意**
				配置继承后,执行安装命令是要先安装父工程.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		⑨聚合
			1 作用: 一键安装(install)各个模块工程
			2 配置方式: 在一个"总的聚合工程"中配置各个参与聚合的模块
				<!-- 配置聚合 -->
				<modules>
					<!-- 指定各个子工程的相对路径 -->
					<module>../Hello</module>
					<module>../HelloFriend</module>
					<module>../MakeFriends</module>
				</modules>
			3 使用方式: 在聚合工程的pom.xml上点击右键->run as->maven install

********************************************************************************************************************************************************************************************

	maven仓库中jar包信息:
		可以自己搜索需要的jar包pom.xml信息,通过时也可以查看一些jar包的依赖关系
		官网:http://mvnrepository.com/

********************************************************************************************************************************************************************************************
















